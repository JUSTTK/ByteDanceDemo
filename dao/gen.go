// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q          = new(Query)
	CasbinRule *casbinRule
	Comment    *comment
	Like       *like
	Message    *message
	Relation   *relation
	User       *user
	Video      *video
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	CasbinRule = &Q.CasbinRule
	Comment = &Q.Comment
	Like = &Q.Like
	Message = &Q.Message
	Relation = &Q.Relation
	User = &Q.User
	Video = &Q.Video
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:         db,
		CasbinRule: newCasbinRule(db, opts...),
		Comment:    newComment(db, opts...),
		Like:       newLike(db, opts...),
		Message:    newMessage(db, opts...),
		Relation:   newRelation(db, opts...),
		User:       newUser(db, opts...),
		Video:      newVideo(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	CasbinRule casbinRule
	Comment    comment
	Like       like
	Message    message
	Relation   relation
	User       user
	Video      video
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:         db,
		CasbinRule: q.CasbinRule.clone(db),
		Comment:    q.Comment.clone(db),
		Like:       q.Like.clone(db),
		Message:    q.Message.clone(db),
		Relation:   q.Relation.clone(db),
		User:       q.User.clone(db),
		Video:      q.Video.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:         db,
		CasbinRule: q.CasbinRule.replaceDB(db),
		Comment:    q.Comment.replaceDB(db),
		Like:       q.Like.replaceDB(db),
		Message:    q.Message.replaceDB(db),
		Relation:   q.Relation.replaceDB(db),
		User:       q.User.replaceDB(db),
		Video:      q.Video.replaceDB(db),
	}
}

type queryCtx struct {
	CasbinRule ICasbinRuleDo
	Comment    ICommentDo
	Like       ILikeDo
	Message    IMessageDo
	Relation   IRelationDo
	User       IUserDo
	Video      IVideoDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		CasbinRule: q.CasbinRule.WithContext(ctx),
		Comment:    q.Comment.WithContext(ctx),
		Like:       q.Like.WithContext(ctx),
		Message:    q.Message.WithContext(ctx),
		Relation:   q.Relation.WithContext(ctx),
		User:       q.User.WithContext(ctx),
		Video:      q.Video.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
